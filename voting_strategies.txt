Voting strategies:
	+ naive:
		use FP->set() in kernel body.
	+ per-thread
		define single stability bool per thread
		at the end of each thread perform FP->set() if needed


		__global__ void kernel(){
			bool set_fp = false;
			for (...) {
				...
				if param_write {
					set_fp = true;
				}
				...
			}
			if set_fp {
				FP->set()
			}
			...
		}


	+ per-coalesced
		use coalesced_threads() to call FP->set() approximately once per warp, depending on divergence

		

	+ per-block
		set single shared bool by all threads of a block, sync the block and call FP->set() once per block
	+ hierarchical
		Combine per-block and per-coalesced to perform a single write to GM and approximately 1 write per warp to shared memory
	+ banks-reduced
		Allocate 32 shared uint32_t's and let each thread write to their own bank depending on rank % 32
		reduce to a single write to GM
	+ banks-32-writes
		The same but skip reduction