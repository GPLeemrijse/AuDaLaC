struct HighestPriority(value : Nat) {
	reset_highest {
		value := 0;
	}
}

struct Vertex(priority : Nat,
			  odd_attr: Bool,
			  even_attr: Bool,
			  all_outgoing_are_even_attr: Bool,
			  all_outgoing_are_odd_attr: Bool,
			  highest: HighestPriority) {
	
	nominate_highest {
		if !(odd_attr || even_attr) && highest.value < priority then {
			highest.value := priority;
		}
	}

	win_highest {
		if highest.value == priority then {
			if priority % 2 == 0 then {
				even_attr := true;
			}

			if priority % 2 != 0 then {
				odd_attr := true;
			}
		}
	}

	attract {
		if priority % 2 == 0 && all_outgoing_are_odd_attr then {
			odd_attr := true;
		}

		if priority % 2 != 0 && all_outgoing_are_even_attr then {
			even_attr := true;
		}
	}

	reset_all_outgoing {
		if !(odd_attr || even_attr) then {
			all_outgoing_are_even_attr := true;
			all_outgoing_are_odd_attr := true;
		}
	}
}

struct Edge(s : Vertex, t : Vertex) {
	
	attract {
		if t.even_attr && s.priority % 2 == 0 then {
			s.even_attr := true;
		}

		if t.odd_attr && s.priority % 2 != 0 then {
			s.odd_attr := true;
		}
	}

	test_all_outgoing {
		if !t.odd_attr then {
			s.all_outgoing_are_odd_attr := false;
		}

		if !t.even_attr then {
			s.all_outgoing_are_even_attr := false;
		}
	}
}


Fix(
	Fix(
		nominate_highest
	)
	<
	win_highest
	<
	Fix(
		reset_all_outgoing
		<
		test_all_outgoing
		<
		Fix(attract)
	)
	<
	reset_highest
)