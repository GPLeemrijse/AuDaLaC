struct State(X_m : Bool, X_0 : Bool, X_k : Bool, N : Bool, B : Bool, Y : Bool) {

	init_X_k {
		// X_k = X
		X_k := true;
	}

	init_N {
		// N_0^k = X_m ∩ X^k
		N := X_m && X_k;
	}

	init_B {
		// B_0^k = X^k \ N^k
		B := X_k && !N;
	}

	remove_bad {
		// X^(k+1) = X^k \ B^k
		X_k := X_k && !B;
	}

	init_Y {
		// Y_0 = X_0 ∩ X^k
		Y := X_0 && X_k;
	}
}

struct ControllableEvent(x : State, y : State){
	compute_nonblocking {
		if x.X_k && y.N then {
			x.N := true;
		}
	}

	compute_supervisor {
		// Note reversal: y --> x instead of x --> y
		if y.X_k && x.Y then {
			y.Y := true;
		}
	}
}

struct UncontrollableEvent(x : State, y : State){
	compute_bad {
		if x.X_k && y.B then {
			x.B := true;
		}
	}
}

init_X_k
< Fix(
	init_N
	< Fix(
		compute_nonblocking
	)
	< init_B
	< Fix(
		compute_bad
	)
	<
	remove_bad
)
< init_Y
< Fix(
	compute_supervisor
)